# Global configuration
BUILD_ROOT   ?= build
BUILD_TYPE   ?= Debug
WITH_TESTS   ?= 0
OS           := $(shell uname -s)

# Toolchain configuration
CXX          ?= g++
AR           ?= ar
MKDIR        := mkdir -p
RM           := rm -rf

# Project structure
SRC_DIR      := Sources
OBJ_DIR      := $(BUILD_ROOT)/obj
BIN_DIR      := $(BUILD_ROOT)/bin/$(BUILD_TYPE)
LIB_DIR      := $(BIN_DIR)/Engine
TEST_DIR     := $(BIN_DIR)/Tests

# Source files
AUDIO_SRC    := $(wildcard $(SRC_DIR)/Kernel/Audio/*.cpp)
GRAPHICS_SRC := $(wildcard $(SRC_DIR)/Kernel/Graphics/*.cpp)
PHYSICS_SRC  := $(wildcard $(SRC_DIR)/Kernel/Physics/*.cpp)
EDITOR_SRC   := $(wildcard $(SRC_DIR)/Editor/*.cpp)
TEST_SRC     := $(wildcard Tests/*.cpp)
AUX_SRC      := $(wildcard $(SRC_DIR)/Kernel/Aux/*.cpp) \
                $(wildcard $(SRC_DIR)/Kernel/Math/Vector/*.cpp) \
                $(wildcard $(SRC_DIR)/Kernel/Math/Quaternion/*.cpp) \
                $(wildcard $(SRC_DIR)/Kernel/Math/Matrix/*.cpp) \
                $(wildcard $(SRC_DIR)/Kernel/JSONParser/*.cpp)

# Object files
AUDIO_OBJ    := $(addprefix $(OBJ_DIR)/Audio/, $(notdir $(AUDIO_SRC:.cpp=.o)))
GRAPHICS_OBJ := $(addprefix $(OBJ_DIR)/Graphics/, $(notdir $(GRAPHICS_SRC:.cpp=.o)))
PHYSICS_OBJ  := $(addprefix $(OBJ_DIR)/Physics/, $(notdir $(PHYSICS_SRC:.cpp=.o)))
EDITOR_OBJ   := $(addprefix $(OBJ_DIR)/Editor/, $(notdir $(EDITOR_SRC:.cpp=.o)))
TEST_OBJ     := $(addprefix $(OBJ_DIR)/Tests/, $(notdir $(TEST_SRC:.cpp=.o)))
AUX_OBJ      := $(addprefix $(OBJ_DIR)/Aux/, $(notdir $(AUX_SRC:.cpp=.o)))

# Output files
AUDIO_LIB    := $(LIB_DIR)/libAudio.a
GRAPHICS_LIB := $(LIB_DIR)/libGraphics.a
PHYSICS_LIB  := $(LIB_DIR)/libPhysics.a
AUX_LIB      := $(LIB_DIR)/libAux.a
EDITOR_EXE   := $(BIN_DIR)/Editor$(if $(filter Windows%,$(OS)),.exe)
TEST_EXE     := $(TEST_DIR)/Tests$(if $(filter Windows%,$(OS)),.exe)

# Compiler flags
CXXFLAGS     := -std=c++23 -I$(SRC_DIR)/Kernel
LDFLAGS      := -L$(LIB_DIR)

ifeq ($(BUILD_TYPE),Debug)
    CXXFLAGS += -g -O0 -DDEBUG
else
    CXXFLAGS += -O3 -DNDEBUG
endif

# Warnings and error handling
ifeq ($(CXX),clang++)
    CXXFLAGS += -Wall -Wextra -Wpedantic -Werror
else ifneq (,$(findstring g++,$(CXX)))
    CXXFLAGS += -Wall -Wextra -Wpedantic -Werror
else ifneq (,$(findstring cl.exe,$(CXX)))
    CXXFLAGS += /W4 /WX
endif

# Targets
all: directories libraries editor
	@echo "Build completed in $(BUILD_ROOT)!"

directories:
	@$(MKDIR) $(OBJ_DIR)/Audio
	@$(MKDIR) $(OBJ_DIR)/Graphics
	@$(MKDIR) $(OBJ_DIR)/Physics
	@$(MKDIR) $(OBJ_DIR)/Aux
	@$(MKDIR) $(OBJ_DIR)/Editor
	@$(MKDIR) $(LIB_DIR)
	@$(MKDIR) $(BIN_DIR)
	@$(if $(filter 1,$(WITH_TESTS)), $(MKDIR) $(OBJ_DIR)/Tests && $(MKDIR) $(TEST_DIR))

libraries: $(AUDIO_LIB) $(GRAPHICS_LIB) $(PHYSICS_LIB) $(AUX_LIB)

editor: $(EDITOR_EXE)

tests: $(TEST_EXE)

# Pattern rules
$(OBJ_DIR)/Audio/%.o: $(SRC_DIR)/Kernel/Audio/%.cpp
	$(CXX) $(CXXFLAGS) -c $< -o $@

$(OBJ_DIR)/Graphics/%.o: $(SRC_DIR)/Kernel/Graphics/%.cpp
	$(CXX) $(CXXFLAGS) -c $< -o $@

$(OBJ_DIR)/Physics/%.o: $(SRC_DIR)/Kernel/Physics/%.cpp
	$(CXX) $(CXXFLAGS) -c $< -o $@

$(OBJ_DIR)/Aux/%.o: $(SRC_DIR)/Kernel/Aux/%.cpp
	$(CXX) $(CXXFLAGS) -c $< -o $@

$(OBJ_DIR)/Aux/%.o: $(SRC_DIR)/Kernel/Math/Vector/%.cpp
	$(CXX) $(CXXFLAGS) -c $< -o $@

$(OBJ_DIR)/Aux/%.o: $(SRC_DIR)/Kernel/Math/Quaternion/%.cpp
	$(CXX) $(CXXFLAGS) -c $< -o $@

$(OBJ_DIR)/Aux/%.o: $(SRC_DIR)/Kernel/Math/Matrix/%.cpp
	$(CXX) $(CXXFLAGS) -c $< -o $@

$(OBJ_DIR)/Aux/%.o: $(SRC_DIR)/Kernel/JSONParser/%.cpp
	$(CXX) $(CXXFLAGS) -c $< -o $@

$(OBJ_DIR)/Editor/%.o: $(SRC_DIR)/Editor/%.cpp
	$(CXX) $(CXXFLAGS) -c $< -o $@

$(OBJ_DIR)/Tests/%.o: Tests/%.cpp
	$(CXX) $(CXXFLAGS) -c $< -o $@

# Libraries
$(AUDIO_LIB): $(AUDIO_OBJ)
	$(AR) rcs $@ $^

$(GRAPHICS_LIB): $(GRAPHICS_OBJ)
	$(AR) rcs $@ $^

$(PHYSICS_LIB): $(PHYSICS_OBJ)
	$(AR) rcs $@ $^

$(AUX_LIB): $(AUX_OBJ)
	$(AR) rcs $@ $^

# Executables
$(EDITOR_EXE): $(EDITOR_OBJ)
	$(CXX) $^ -o $@ $(LDFLAGS) -lAudio -lGraphics -lPhysics -lAux

$(TEST_EXE): $(TEST_OBJ)
	$(CXX) $^ -o $@ $(LDFLAGS) -lAudio -lGraphics -lPhysics -lAux

# Include tests if requested
ifeq ($(WITH_TESTS),1)
all: tests
endif

clean:
	$(RM) $(BUILD_ROOT)

.PHONY: all directories libraries editor tests clean
